How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It clearly shows which lines were changed, and makes it easy to narrow down 
	my search to find which change(s) may have introduced a bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It would make it easier for me to find and correct bugs, as well as making
	it easier to change sections of the code without worrying about having to 
	rewrite anything if I introduce a bug.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    I can choose what I believe are the most logical points to make commits, 
	instead of potentially having commits with broken or incomplete code from 
	an automatic version.  The danger is that I have to remember to make the commits.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because, often when coding, multiple files are tied together so closely that 
	changes made to one file will go hand in hand with changes to another file, 
	and all the inter-related files are best treated as if they were one large 
	unit instead of completely independent and unrelated files.

How can you use the commands git log and git diff to view the history of files?

    Git log will show me a list of all the commits made on a particular file or 
	repository.  Using that will let me obtain the version IDs which I can use 
	with git diff to see how each commit changed the file(s).

How might using version control make you more confident to make changes that
could break something?

    Because I can always easily revert back to a version prior to my bold and 
	potentially bug-inducing changes.

Now that you have your workspace set up, what do you want to try using Git for?

    I still want to learn more about how to use Git with my own programming 
	projects.  Once I feel confident, I can then start to use version-control 
	with all of my own coding efforts.
